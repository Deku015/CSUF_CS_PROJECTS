     1                                  ; This program will allow a user to input float numbers in an array A and array B, print the magnitude, and be able to unionize them.
     2                                  ; Copyright (C) 2023 Shadi Hirbawi.                                                                           *
     3                                  ;                                                                                                                           *
     4                                  ;This file is part of the software program "Add arrays".
     5                                  ;This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License   *
     6                                  ;version 3 as published by the Free Software Foundation.                                                                    *
     7                                  ;This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied          *
     8                                  ;warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.     *
     9                                  ;A copy of the GNU General Public License v3 is available here:  <https:;www.gnu.org/licenses/>.                            *
    10                                  ;****************************************************************************************************************************
    11                                  ;========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2=========3**
    12                                  ;
    13                                  ;Author information
    14                                  ;  Author name: Shadi Hirbawi
    15                                  ;  Author email: hirbawishadi@csu.fullerton.edu
    16                                  ;
    17                                  ;Program information
    18                                  ;  Program name: Homework 3
    19                                  ;  Programming languages: Assembly, C, bash, C++
    20                                  ;  Date program began: 2023 March 13
    21                                  ;  Date of last update: 2023 March 13
    22                                  ;  Date of reorganization of comments: 2023 March 13
    23                                  ;  Files in this program: quick.c, executive.asm, fill_random_array.asm, main.cpp, r.sh, show_array.asm
    24                                  ;  Status: Finished.  
    25                                  ;
    26                                  ;This file
    27                                  ;   File name: executive.asm
    28                                  ;   Language: X86 with Intel syntax.
    29                                  ;   Max page width: 132 columns
    30                                  ;  Assemble: nasm -f elf64 -l executive.lis -o executive.o executive.asm
    31                                  ;   Link: g++ -m64 -std=c++17 -fno-pie -no-pie -o rand_array.out executive.o fill_random_array.o show_array.o main.o quick.o
    32                                  ;   Purpose: control all array functions and print out prompts
    33                                  ;========================================================================================================
    34                                  global executive
    35                                  
    36                                  extern printf
    37                                  extern scanf
    38                                  extern fgets
    39                                  extern stdin 
    40                                  extern strlen
    41                                  
    42                                  extern fill_random_array
    43                                  extern qsort
    44                                  extern show_array
    45                                  extern quick
    46                                  
    47                                  LARGE_BOUND equ 64
    48                                  SMALL_BOUND equ 16
    49                                  INPUT_LEN equ 256
    50                                  
    51                                  segment .data
    52                                  
    53                                  align SMALL_BOUND
    54 00000000 257300                      format db "%s", 0 ;Null terminating string
    55 00000003 506C6561736520656E-         enter_Name db "Please enter your name: ", 0
    55 0000000C 74657220796F757220-
    55 00000015 6E616D653A2000     
    56 0000001C 506C6561736520656E-         enter_Title db "Please enter your title (Mr,Ms,Sargent,Chief,Project Leader,etc): ",0
    56 00000025 74657220796F757220-
    56 0000002E 7469746C6520284D72-
    56 00000037 2C4D732C5361726765-
    56 00000040 6E742C43686965662C-
    56 00000049 50726F6A656374204C-
    56 00000052 65616465722C657463-
    56 0000005B 293A2000           
    57 0000005F 4E69636520746F206D-         hello db "Nice to meet you ",0
    57 00000068 65657420796F752000 
    58 00000071 2000                        spc db " ",0
    59 00000073 0A546869732070726F-         prompt db 10, "This program will generate 64-bit IEEE float numbers.",10,"How many numbers do you want. Today's limit is 100 per customer. ",0
    59 0000007C 6772616D2077696C6C-
    59 00000085 2067656E6572617465-
    59 0000008E 2036342D6269742049-
    59 00000097 45454520666C6F6174-
    59 000000A0 206E756D626572732E-
    59 000000A9 0A486F77206D616E79-
    59 000000B2 206E756D6265727320-
    59 000000BB 646F20796F75207761-
    59 000000C4 6E742E20546F646179-
    59 000000CD 2773206C696D697420-
    59 000000D6 697320313030207065-
    59 000000DF 7220637573746F6D65-
    59 000000E8 722E2000           
    60 000000EC 256C6400                    num_format db "%ld",0
    61 000000F0 0A596F7572206E756D-         prompt_2 db 10,"Your numbers have been stored in an array. Here is that array.",10, "IEEE754              Scientific Decimal",10,0
    61 000000F9 626572732068617665-
    61 00000102 206265656E2073746F-
    61 0000010B 72656420696E20616E-
    61 00000114 2061727261792E2048-
    61 0000011D 657265206973207468-
    61 00000126 61742061727261792E-
    61 0000012F 0A4945454537353420-
    61 00000138 202020202020202020-
    61 00000141 20202020536369656E-
    61 0000014A 746966696320446563-
    61 00000153 696D616C0A00       
    62 00000159 0A5468652061727261-         sort db 10,"The array is now being sorted",10,"Here is the updated array.",10, "IEEE754                Scientific Decimal",10,0
    62 00000162 79206973206E6F7720-
    62 0000016B 6265696E6720736F72-
    62 00000174 7465640A4865726520-
    62 0000017D 697320746865207570-
    62 00000186 646174656420617272-
    62 0000018F 61792E0A4945454537-
    62 00000198 353420202020202020-
    62 000001A1 202020202020202020-
    62 000001AA 536369656E74696669-
    62 000001B3 6320446563696D616C-
    62 000001BC 0A00               
    63 000001BE 0A476F6F6420627965-         goodbye db 10,"Good bye ",0
    63 000001C7 2000               
    64 000001C9 2E20596F7520617265-         goodbye_2 db ". You are welcome any time.",10,0
    64 000001D2 2077656C636F6D6520-
    64 000001DB 616E792074696D652E-
    64 000001E4 0A00               
    65 000001E6 90<rept>                align LARGE_BOUND
    66                                      segment .bss
    67 00000000 <res 00000100>              title resb INPUT_LEN
    68 00000100 <res 00000100>              name resb INPUT_LEN
    69 00000200 <res 00000320>              myArray resq 100
    70                                  
    71                                  
    72                                  segment .text
    73                                  executive:
    74                                  ;---------------------
    75 00000000 55                      push rbp
    76 00000001 4889E5                  mov  rbp,rsp
    77 00000004 57                      push rdi                                                    
    78 00000005 56                      push rsi                                                    
    79 00000006 52                      push rdx                                                    
    80 00000007 51                      push rcx                                                    
    81 00000008 4150                    push r8                                                     
    82 0000000A 4151                    push r9                                                     
    83 0000000C 4152                    push r10                                                    
    84 0000000E 4153                    push r11                                                    
    85 00000010 4154                    push r12                                                  
    86 00000012 4155                    push r13                                                    
    87 00000014 4156                    push r14                                                    
    88 00000016 4157                    push r15                                                    
    89 00000018 53                      push rbx                                                    
    90 00000019 9C                      pushf                                                      
    91                                  ;----------------------
    92 0000001A 6A00                    push qword 0
    93                                  
    94 0000001C 6A00                    push qword 0
    95 0000001E B800000000              mov rax,0
    96 00000023 48BF-                   mov rdi, format
    96 00000025 [0000000000000000] 
    97 0000002D 48BE-                   mov rsi, enter_Name
    97 0000002F [0300000000000000] 
    98 00000037 E8(00000000)            call printf
    99 0000003C 58                      pop rax
   100                                  
   101 0000003D 6A00                    push qword 0
   102 0000003F B800000000              mov rax, 0
   103 00000044 48BF-                   mov rdi, name
   103 00000046 [0001000000000000] 
   104 0000004E BE00010000              mov rsi, INPUT_LEN
   105 00000053 488B1425[00000000]      mov rdx, [stdin]
   106 0000005B E8(00000000)            call fgets
   107 00000060 58                      pop rax
   108                                  
   109 00000061 6A00                    push qword 0
   110 00000063 B800000000              mov rax, 0
   111 00000068 48BF-                   mov rdi, name
   111 0000006A [0001000000000000] 
   112 00000072 E8(00000000)            call strlen
   113                                  
   114 00000077 4883E801                sub rax, 1 
   115 0000007B C680[00010000]00        mov byte [name + rax], 0
   116 00000082 58                      pop rax
   117                                  
   118 00000083 6A00                    push qword 0
   119 00000085 B800000000              mov rax, 0
   120 0000008A 48BF-                   mov rdi, format
   120 0000008C [0000000000000000] 
   121 00000094 48BE-                   mov rsi, enter_Title
   121 00000096 [1C00000000000000] 
   122 0000009E E8(00000000)            call printf
   123 000000A3 58                      pop rax
   124                                  
   125 000000A4 6A00                    push qword 0
   126 000000A6 B800000000              mov rax, 0
   127 000000AB 48BF-                   mov rdi, title
   127 000000AD [0000000000000000] 
   128 000000B5 BE00010000              mov rsi, INPUT_LEN
   129 000000BA 488B1425[00000000]      mov rdx, [stdin]
   130 000000C2 E8(00000000)            call fgets
   131 000000C7 58                      pop rax
   132                                  
   133 000000C8 6A00                    push qword 0
   134 000000CA B800000000              mov rax, 0
   135 000000CF 48BF-                   mov rdi, title
   135 000000D1 [0000000000000000] 
   136 000000D9 E8(00000000)            call strlen
   137                                  
   138 000000DE 4883E801                sub rax, 1 
   139 000000E2 C680[00000000]00        mov byte [title + rax], 0
   140 000000E9 58                      pop rax
   141                                  
   142 000000EA 6A00                    push qword 0
   143 000000EC B800000000              mov rax,0
   144 000000F1 48BF-                   mov rdi, format
   144 000000F3 [0000000000000000] 
   145 000000FB 48BE-                   mov rsi, hello
   145 000000FD [5F00000000000000] 
   146 00000105 E8(00000000)            call printf
   147 0000010A 58                      pop rax
   148                                  
   149 0000010B 6A00                    push qword 0
   150 0000010D B800000000              mov rax, 0
   151 00000112 48BF-                   mov rdi, format
   151 00000114 [0000000000000000] 
   152 0000011C 48BE-                   mov rsi, title
   152 0000011E [0000000000000000] 
   153 00000126 E8(00000000)            call printf
   154 0000012B 58                      pop rax
   155                                  
   156 0000012C 6A00                    push qword 0
   157 0000012E B800000000              mov rax, 0
   158 00000133 48BF-                   mov rdi, format
   158 00000135 [0000000000000000] 
   159 0000013D 48BE-                   mov rsi, spc
   159 0000013F [7100000000000000] 
   160 00000147 E8(00000000)            call printf
   161 0000014C 58                      pop rax
   162                                  
   163 0000014D 6A00                    push qword 0
   164 0000014F B800000000              mov rax, 0
   165 00000154 48BF-                   mov rdi, format
   165 00000156 [0000000000000000] 
   166 0000015E 48BE-                   mov rsi, name 
   166 00000160 [0001000000000000] 
   167 00000168 E8(00000000)            call printf
   168 0000016D 58                      pop rax
   169                                  
   170 0000016E 6A00                    push qword 0
   171 00000170 B800000000              mov rax, 0
   172 00000175 48BF-                   mov rdi, format
   172 00000177 [0000000000000000] 
   173 0000017F 48BE-                   mov rsi, prompt
   173 00000181 [7300000000000000] 
   174 00000189 E8(00000000)            call printf
   175 0000018E 58                      pop rax
   176                                  
   177 0000018F 6A00                    push qword 0
   178 00000191 B800000000              mov rax,0
   179 00000196 48BF-                   mov rdi, num_format
   179 00000198 [EC00000000000000] 
   180 000001A0 4889E6                  mov rsi, rsp
   181 000001A3 E8(00000000)            call scanf
   182 000001A8 415F                    pop r15
   183                                  
   184 000001AA 6A00                    push qword 0
   185 000001AC B800000000              mov rax, 0
   186 000001B1 48BF-                   mov rdi, prompt_2
   186 000001B3 [F000000000000000] 
   187 000001BB E8(00000000)            call printf
   188 000001C0 58                      pop rax
   189                                  
   190 000001C1 6A00                    push qword 0
   191 000001C3 B800000000              mov rax, 0
   192 000001C8 48BF-                   mov rdi, myArray
   192 000001CA [0002000000000000] 
   193 000001D2 4C89FE                  mov rsi, r15
   194 000001D5 E8(00000000)            call fill_random_array
   195 000001DA 58                      pop rax
   196                                  
   197 000001DB 6A00                    push qword 0
   198 000001DD B800000000              mov rax, 0
   199 000001E2 48BF-                   mov rdi, myArray
   199 000001E4 [0002000000000000] 
   200 000001EC 4C89FE                  mov rsi, r15
   201 000001EF E8(00000000)            call show_array
   202 000001F4 58                      pop rax
   203                                  
   204 000001F5 6A00                    push qword 0
   205 000001F7 B800000000              mov rax, 0
   206 000001FC 48BF-                   mov rdi, sort
   206 000001FE [5901000000000000] 
   207 00000206 E8(00000000)            call printf
   208 0000020B 58                      pop rax
   209                                  
   210 0000020C 6A00                    push qword 0
   211 0000020E 48BF-                   mov rdi, myArray
   211 00000210 [0002000000000000] 
   212 00000218 4C89FE                  mov rsi, r15
   213 0000021B BA08000000              mov rdx, 8
   214 00000220 48B9-                   mov rcx, quick
   214 00000222 [0000000000000000] 
   215 0000022A E8(00000000)            call qsort
   216 0000022F 58                      pop rax
   217                                  
   218 00000230 6A00                    push qword 0
   219 00000232 B800000000              mov rax, 0
   220 00000237 48BF-                   mov rdi, myArray
   220 00000239 [0002000000000000] 
   221 00000241 4C89FE                  mov rsi, r15
   222 00000244 E8(00000000)            call show_array
   223 00000249 58                      pop rax
   224                                  
   225                                  
   226                                  
   227 0000024A 6A00                    push qword 0
   228 0000024C B800000000              mov rax, 0
   229 00000251 48BF-                   mov rdi, format
   229 00000253 [0000000000000000] 
   230 0000025B 48BE-                   mov rsi, goodbye
   230 0000025D [BE01000000000000] 
   231 00000265 E8(00000000)            call printf
   232 0000026A 58                      pop rax
   233                                  
   234 0000026B 6A00                    push qword 0
   235 0000026D B800000000              mov rax, 0
   236 00000272 48BF-                   mov rdi, format
   236 00000274 [0000000000000000] 
   237 0000027C 48BE-                   mov rsi, title
   237 0000027E [0000000000000000] 
   238 00000286 E8(00000000)            call printf
   239 0000028B 58                      pop rax
   240                                  
   241 0000028C 6A00                    push qword 0
   242 0000028E B800000000              mov rax,0
   243 00000293 48BF-                   mov rdi, format
   243 00000295 [0000000000000000] 
   244 0000029D 48BE-                   mov rsi, goodbye_2
   244 0000029F [C901000000000000] 
   245 000002A7 E8(00000000)            call printf
   246 000002AC 58                      pop rax
   247                                  
   248                                  
   249                                  
   250 000002AD 58                      pop rax
   251 000002AE 48B8-                   mov rax, name
   251 000002B0 [0001000000000000] 
   252                                  ;---------------------
   253 000002B8 9D                      popf                                                        
   254 000002B9 5B                      pop rbx                                                    
   255 000002BA 415F                    pop r15                                                   
   256 000002BC 415E                    pop r14                                                   
   257 000002BE 415D                    pop r13                                                     
   258 000002C0 415C                    pop r12                                                     
   259 000002C2 415B                    pop r11                                                     
   260 000002C4 415A                    pop r10                                                     
   261 000002C6 4159                    pop r9                                                      
   262 000002C8 4158                    pop r8                                                      
   263 000002CA 59                      pop rcx                                                     
   264 000002CB 5A                      pop rdx                                                    
   265 000002CC 5E                      pop rsi                                                     
   266 000002CD 5F                      pop rdi                                                     
   267 000002CE 5D                      pop rbp                                                     
   268                                  
   269                                  
   270 000002CF C3                      ret 
