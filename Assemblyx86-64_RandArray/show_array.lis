     1                                  ; This program will allow a user to input float numbers in an array A and array B, print the magnitude, and be able to unionize them.
     2                                  ; Copyright (C) 2023 Shadi Hirbawi.                                                                           *
     3                                  ;                                                                                                                           *
     4                                  ;This file is part of the software program "Add arrays".
     5                                  ;This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License   *
     6                                  ;version 3 as published by the Free Software Foundation.                                                                    *
     7                                  ;This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied          *
     8                                  ;warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.     *
     9                                  ;A copy of the GNU General Public License v3 is available here:  <https:;www.gnu.org/licenses/>.                            *
    10                                  ;****************************************************************************************************************************
    11                                  ;========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2=========3**
    12                                  ;
    13                                  ;Author information
    14                                  ;  Author name: Shadi Hirbawi
    15                                  ;  Author email: hirbawishadi@csu.fullerton.edu
    16                                  ;
    17                                  ;Program information
    18                                  ;  Program name: Homework 3
    19                                  ;  Programming languages: Assembly, C, bash, C++
    20                                  ;  Date program began: 2023 March 13
    21                                  ;  Date of last update: 2023 March 13
    22                                  ;  Date of reorganization of comments: 2023 March 13
    23                                  ;  Files in this program: quick.c, executive.asm, fill_random_array.asm, main.cpp, r.sh, show_array.asm
    24                                  ;  Status: Finished.  
    25                                  ;
    26                                  ;This file
    27                                  ;   File name: show_array.asm
    28                                  ;   Language: X86 with Intel syntax.
    29                                  ;   Max page width: 132 columns
    30                                  ;  Assemble: nasm -f elf64 -l show_array.lis -o show_array.o show_array.asm
    31                                  ;   Link: g++ -m64 -std=c++17 -fno-pie -no-pie -o rand_array.out executive.o fill_random_array.o show_array.o main.o quick.o
    32                                  ;   Purpose: shows array in IEEE754 and Hex
    33                                  ;========================================================================================================
    34                                  global show_array
    35                                  
    36                                  extern printf
    37                                  
    38                                  segment .data
    39 00000000 3078253031366C7820-     ieee_SD db "0x%016lx   %-18.13e",10,0  ;format for IEEE and SN
    39 00000009 2020252D31382E3133-
    39 00000012 650A00             
    40                                  
    41                                  segment .bss
    42                                  
    43                                  segment .text
    44                                  show_array:
    45                                  ;---------------------
    46 00000000 55                      push rbp
    47 00000001 4889E5                  mov  rbp,rsp
    48 00000004 57                      push rdi                                                    
    49 00000005 56                      push rsi                                                    
    50 00000006 52                      push rdx                                                    
    51 00000007 51                      push rcx                                                    
    52 00000008 4150                    push r8                                                     
    53 0000000A 4151                    push r9                                                     
    54 0000000C 4152                    push r10                                                    
    55 0000000E 4153                    push r11                                                    
    56 00000010 4154                    push r12                                                  
    57 00000012 4155                    push r13                                                    
    58 00000014 4156                    push r14                                                    
    59 00000016 4157                    push r15                                                    
    60 00000018 53                      push rbx                                                    
    61 00000019 9C                      pushf                                                      
    62                                  ;----------------------
    63 0000001A 6A00                    push qword 0
    64                                  
    65 0000001C 4989FC                  mov r12, rdi ;array
    66 0000001F 4989F5                  mov r13, rsi  ;size
    67 00000022 41BE00000000            mov r14, 0  ;index
    68                                  
    69                                  beginLoop:
    70 00000028 4D39EE                      cmp r14, r13   ;if r14 > r13, done
    71 0000002B 7426                        je done 
    72                                  
    73 0000002D 6A00                        push qword 0
    74 0000002F B801000000                  mov rax, 1
    75 00000034 48BF-                       mov rdi, ieee_SD    ;mov format into rdi
    75 00000036 [0000000000000000] 
    76 0000003E 4B8B34F4                    mov rsi, [r12 + r14*8]    ; put number in rsi
    77 00000042 F2430F1004F4                movsd xmm0, [r12 + r14*8]  ;convert to double
    78 00000048 E8(00000000)                call printf    ;print
    79 0000004D 58                          pop rax
    80                                  
    81 0000004E 49FFC6                      inc r14    ;inc index
    82 00000051 EBD5                        jmp beginLoop   ;loop over
    83                                  done:
    84                                  
    85                                  
    86 00000053 58                      pop rax
    87                                  ;---------------------
    88 00000054 9D                      popf                                                        
    89 00000055 5B                      pop rbx                                                    
    90 00000056 415F                    pop r15                                                   
    91 00000058 415E                    pop r14                                                   
    92 0000005A 415D                    pop r13                                                     
    93 0000005C 415C                    pop r12                                                     
    94 0000005E 415B                    pop r11                                                     
    95 00000060 415A                    pop r10                                                     
    96 00000062 4159                    pop r9                                                      
    97 00000064 4158                    pop r8                                                      
    98 00000066 59                      pop rcx                                                     
    99 00000067 5A                      pop rdx                                                    
   100 00000068 5E                      pop rsi                                                     
   101 00000069 5F                      pop rdi                                                     
   102 0000006A 5D                      pop rbp                                                     
   103                                  
   104                                  
   105 0000006B C3                      ret 
